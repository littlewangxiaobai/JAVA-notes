六大设计原则
1.单一职责原则（Single Responsibility Principle）：
定义：应该有且只有一个原因引起类的变更。
优点：
    a.类复杂性降低；
    b.可读性提高；
    c.可维护性提高；
    d.变更引起的风险降低；
体现了面对对象的封装特性。


2.里氏替换原则（Liskov Substitution Principle）
定义：所有引用基类的地方必须能透明地使用其子类的对象。
怎么做到：
    1.子类必须完全实现父类的方法；
    2.子类可以有自己的个性；
    3.覆盖或实现父类的方法时输入参数可以被放大；
    4.覆写或实现父类的方法时输出结果可以被缩小；
目的：增强程序的健壮性。
体现了面对对象的继承特性。


3.依赖倒置原则（Dependence Inversion Principle）
定义：
    高层模块不应该依赖底层模块，两则都应该依赖其抽象；
    抽象不应该依赖细节；
    细节应该依赖抽象。
在java中的表现：
    模块间的依赖通过抽象发生，实现类间不发生直接的依赖关系，其依赖关系是通过其接口或抽象产生的；
    接口或抽象不依赖于实现类；
    实现类依赖接口或抽象。
面向接口编程（面向设计编程）
优点：减少类间的耦合性，提高系统稳定性，降低并行开发引起的风险，提高代码的可读性和可维护性。
怎么做到：
    每个类尽量都有接口或抽象类，或者抽象类和接口两者具备；
    变量的表面类型尽量是接口或者是抽象类；
    任何类都不应该从具体类派生；
    尽量不要覆写积基类的方法；
    结合里氏替换原则使用。


4.接口隔离原则（Interface Segregation Principle）
定义：类间的依赖关系应该建立在最小的接口上。
怎么做到：
    一个接口只服务于一个子模块或业务逻辑；
    通过业务逻辑压缩接口中的public方法；
    已经被污染了的接口，尽量去修改；若变更的风险较大，则采用适配器模式进行转化处理
    了解环境，拒绝盲从。


5.迪米特法则（Law of Demeter） 最少知识原则（Least Knowledge Principle）
定义：一个对象应该对其他对象有最少的了解。
核心观念：类间解耦，弱耦合。


6.开闭原则（Open Closed Principle）
定义：一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。
开闭原则是最基础的一个原则，前五章节介绍的原则都是开闭原则的具体形态，
    1.开闭原则对测试的影响；
    2.开闭原则可以提高复用性；
    3.开闭原则可以提高可维护性；
    4.面向对象开发的要求。
如何使用开闭原则：
    1. 抽象约束
    2. 元数据控制模块行为
    3. 制定项目章程
    4. 封装变化。

耦合，内聚 为什么?





















